{"version":3,"sources":["src/utils/angle2rad.ts","src/utils/checkLimits.ts","src/Actor.ts","src/actors/Car.ts","src/actors/Barrier.ts","src/state/CircuitManager.ts","src/game.ts"],"names":[],"mappings":"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","file":"game.5ec74c74.js","sourceRoot":"..","sourcesContent":["const angle2rad = (angle: number) => (Math.PI / 180) * angle;\n\nexport default angle2rad;\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport { Point } from \"../types/Point\";\n\nconst checkLimits = (pos: Point) => {\n  if (pos.x < 600 && pos.x > -50 && pos.y < 400 && pos.y > -20) {\n    return true;\n  }\n  return false;\n};\n\nexport default checkLimits;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable lines-between-class-members */\n/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport { Point } from \"./types/Point\";\n\nexport interface IActor {\n  position: Point;\n  update?: (delta: number) => void;\n  draw: (ctx: CanvasRenderingContext2D) => void;\n  keyboardEventDown?: (key: string) => void;\n  keyboardEventUp?: (key: string) => void;\n}\n\nexport class Actor {\n  position: Point;\n\n  constructor(posisiton: Point) {\n    this.position = posisiton;\n  }\n}\n","/* eslint-disable max-len */\n/* eslint-disable lines-between-class-members */\n/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport angle2rad from \"../utils/angle2rad\";\nimport checkLimits from \"../utils/checkLimits\";\nimport { Point } from \"../types/Point\";\nimport { Actor, IActor } from \"../Actor\";\n\nconst ferrariImg = require(\"../../assets/ferrari.png\");\n\ntype Size = { w: number; h: number };\n\nclass Car extends Actor implements IActor {\n  carSize: Size;\n  carColor: string;\n  angle: number;\n  angleSpeed: number;\n  carSpeed: number;\n  carAcceleration: number;\n  image: HTMLImageElement;\n\n  constructor(\n    initial_pos: Point = { x: 100, y: 100 },\n    size: Size = { w: 10, h: 15 }\n  ) {\n    super(initial_pos);\n    this.carSize = size;\n    this.carColor = \"red\";\n    this.angle = 0;\n    this.angleSpeed = 0;\n    this.carSpeed = 0;\n    this.carAcceleration = 0;\n    this.image = new Image();\n    this.image.src = ferrariImg;\n  }\n\n  update(frame: number) {\n    this.angle += this.angleSpeed;\n    this.angleSpeed *= 0.9; // en cada frame, reducimos su velocidad a un 90%\n    this.carSpeed = this.carSpeed * 0.9 + this.carAcceleration; // la velocidad se va reduciendo pero la aceleraci√≥n es constante\n\n    const newPos: Point = {\n      x: this.position.x + Math.cos(angle2rad(this.angle)) * this.carSpeed, // el giro es con respecto a la velocidad del ejeX y el ejeY\n      y: this.position.y + Math.sin(angle2rad(this.angle)) * this.carSpeed, // el giro es con respecto a la velocidad del ejeX y el ejeY\n    };\n\n    if (checkLimits(newPos)) {\n      this.position = newPos;\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // draw car\n    ctx.translate(this.position.x, this.position.y);\n    ctx.rotate(angle2rad(this.angle));\n    ctx.fillStyle = this.carColor;\n\n    ctx.rotate(angle2rad(180));\n    ctx.drawImage(this.image, -25, -13.5, 50, 25);\n    ctx.fillRect(\n      -this.carSize.h / 2,\n      -this.carSize.w / 2,\n      this.carSize.h,\n      this.carSize.w\n    );\n  }\n\n  keyboardEventDown(key: string) {\n    if (key === \"ArrowLeft\") {\n      this.angleSpeed = -4;\n    } else if (key === \"ArrowRight\") {\n      this.angleSpeed = 4;\n    } else if (key === \"ArrowUp\") {\n      this.carAcceleration = 1;\n    } else if (key === \"ArrowDown\") {\n      this.carAcceleration = -1;\n    }\n  }\n  keyboardEventUp(key: string) {\n    if (key === \"ArrowUp\") {\n      this.carAcceleration = 0;\n    } else if (key === \"ArrowDown\") {\n      this.carAcceleration = 0;\n    }\n  }\n}\n\nexport default Car;\n","/* eslint-disable max-len */\n/* eslint-disable lines-between-class-members */\n/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport { Actor, IActor } from \"../Actor\";\nimport angle2rad from \"../utils/angle2rad\";\nimport { Point } from \"../types/Point\";\nimport { Circuit } from \"../state/CircuitManager\";\n\nconst BARRIER_TOUCH_LIMIT = 30;\nexport class Barrier extends Actor implements IActor {\n  pos: Point;\n  barrierWidth: number;\n  angle: number;\n  touched: boolean;\n  coche: IActor;\n  barrier_index: number;\n  constructor(\n    pos = { x: 0, y: 0 },\n    bw = 60,\n    angle = 0,\n    coche: IActor,\n    barrier_index: number\n  ) {\n    super(pos);\n    this.pos = pos;\n    this.barrierWidth = bw;\n    this.angle = angle;\n    this.touched = false;\n    this.coche = coche;\n    this.barrier_index = barrier_index;\n  }\n\n  update(frame: number) {\n    if (Circuit.current_barrier === this.barrier_index) {\n      const barrier_pos = this.position; // 2\n      const car_pos = this.coche.position; // 1\n      // Euclidean distance: https://es.wikipedia.org/wiki/Distancia_euclidiana\n      const distance = Math.round(\n        Math.sqrt(\n          Math.pow(barrier_pos.x - car_pos.x, 2) +\n            Math.pow(barrier_pos.y - car_pos.y, 2)\n        )\n      );\n\n      if (distance <= BARRIER_TOUCH_LIMIT) {\n        this.touched = true;\n        Circuit.setLastTouchedBarrier(this.barrier_index);\n      }\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.translate(this.pos.x, this.pos.y);\n    ctx.rotate(angle2rad(this.angle));\n    this.touched ? (ctx.strokeStyle = \"green\") : (ctx.strokeStyle = \"black\");\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.moveTo(-this.barrierWidth / 2, 0);\n    ctx.lineTo(this.barrierWidth / 2, 0);\n    ctx.moveTo(0, 0);\n    ctx.arc(0, 0, 3, 0, angle2rad(360));\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.fillText(`(${this.barrier_index})`, 0, 10);\n  }\n\n  keyboardEventDown(key: string) {}\n\n  keyboardEventUp(key: string) {}\n}\n","import { Actor, IActor } from \"../Actor\";\nimport { Barrier } from \"../actors/Barrier\";\nimport angle2rad from \"../utils/angle2rad\";\n\nclass CircuitManager extends Actor implements IActor {\n  barriers: Barrier[] = [];\n  current_barrier: number = 0;\n  total_laps: number = 1;\n  chrono: number = 0;\n  laps: number = 0;\n\n  constructor(coche: IActor) {\n    super({ x: 10, y: 20 });\n    const num = 20;\n    const center = { x: 300, y: 200 };\n    const radius = 200;\n    for (let i = 0; i < num; i++) {\n      const angle = (360 / num) * i + 90;\n      this.barriers.push(\n        new Barrier(\n          {\n            x: center.x + Math.sin(angle2rad(angle)) * radius,\n            y: center.y + Math.cos(angle2rad(angle)) * radius,\n          },\n          80,\n          -angle + 90,\n          coche,\n          i\n        )\n      );\n    }\n  }\n\n  update(frame: number) {\n    let barreras_tocadas: number = this.barriers.filter((b) => b.touched)\n      .length;\n    let total_barriers: number = this.barriers.length;\n    if (barreras_tocadas === total_barriers) {\n      this.nextLap();\n    } else {\n      //   console.log(\n      //     `QUEDAN ${total_barriers - barreras_tocadas} barreras por tocar`\n      //   );\n    }\n    this.chrono += 1 / 25;\n  }\n\n  setLastTouchedBarrier(idx: number) {\n    this.current_barrier = idx + 1;\n  }\n\n  nextLap() {\n    // Reset barriers state\n    this.barriers.forEach((b) => {\n      b.touched = false;\n    });\n\n    // Set next barrier to be touched to zero\n    this.current_barrier = 0;\n\n    // add one lap\n    this.laps += 1;\n    if (this.laps === this.total_laps) {\n      alert(`COMPLELTED ${this.get_chrono()}`);\n    }\n  }\n  get_chrono() {\n    return this.chrono.toFixed(2);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.translate(this.position.x, this.position.y);\n    ctx.font = \"20px Arial\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(\n      `LAPS: ${this.laps + 1}/${this.total_laps} CHRONO ${this.get_chrono()}`,\n      0,\n      0\n    );\n  }\n}\n\nexport let Circuit: CircuitManager;\n\nexport const create_circuit = (car: IActor) => {\n  Circuit = new CircuitManager(car);\n};\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport Car from \"./actors/Car\";\nimport { create_circuit, Circuit } from \"./state/CircuitManager\";\n\nwindow.addEventListener(\"load\", () => {\n  // Get a reference to canvas dom tag\n  const canvas: HTMLCanvasElement = document.getElementById(\n    \"root\"\n  ) as HTMLCanvasElement;\n\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n  const main_car = new Car({ x: 500, y: 200 });\n  // SINGLETON -> gestor de estado del circuito y barreras del mismo\n  create_circuit(main_car);\n\n  const actors = [main_car, Circuit, ...Circuit.barriers];\n\n  // Game render loop\n  const fps = 25;\n  let frame = 0;\n  setInterval(() => {\n    // Clear the canvas\n    ctx.clearRect(0, 0, 600, 400);\n\n    // Update game actor objects\n    actors.forEach((actor) => actor.update(frame));\n\n    // Draw game actor objects\n    actors.forEach((actor) => {\n      ctx.save();\n      actor.draw(ctx);\n      ctx.restore();\n    });\n\n    // Update current frame to make animations work\n    frame += 1;\n  }, 1000 / fps);\n\n  window.addEventListener(\"keydown\", (e) => {\n    actors.forEach((actor) => {\n      if (actor.keyboardEventDown) {\n        actor.keyboardEventDown(e.key);\n      }\n    });\n  });\n  window.addEventListener(\"keyup\", (e) => {\n    actors.forEach(\n      (actor) => actor.keyboardEventUp && actor.keyboardEventUp(e.key)\n    );\n  });\n});\n"]}